'use strict';var _typeof2 = require('babel-runtime/helpers/typeof');var _typeof3 = _interopRequireDefault(_typeof2);var _ = require('./');var _2 = _interopRequireDefault(_);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('Channel', function () {
  var transport = null;
  var channel = null;

  beforeEach(function () {
    transport = { setHandler: jest.fn(), send: jest.fn() };
    channel = new _2.default({ transport: transport });
  });

  describe('constructor', function () {
    it('should set the handler', function () {
      expect(transport.setHandler).toHaveBeenCalled();
    });
  });

  describe('method:addListener', function () {
    it('should call channel.on with args', function () {
      channel.on = jest.fn();
      channel.addListener(1, 2);
      expect(channel.on).toHaveBeenCalled();
      expect(channel.on).toHaveBeenCalledWith(1, 2);
    });
  });

  describe('method:emit', function () {
    it('should call transport.send', function () {var _channel;
      transport.send = jest.fn();
      var type = 'test-type';
      var args = [1, 2, 3];
      var expected = { type: type, args: args };

      (_channel = channel).emit.apply(_channel, [type].concat(args));
      expect(transport.send).toHaveBeenCalled();

      var event = transport.send.mock.calls[0][0];
      expect((0, _typeof3.default)(event.from)).toEqual('string');

      delete event.from;
      expect(event).toEqual(expected);
    });
  });

  describe('method:eventNames', function () {
    it('should return an array of strings', function () {
      channel.on('type-1', 11);
      channel.on('type-2', 21);
      channel.on('type-2', 22);
      var expected = ['type-1', 'type-2'];
      expect(channel.eventNames()).toEqual(expected);
    });
  });

  describe('method:listenerCount', function () {
    it('should return the correct count', function () {
      channel.on('type-1', 11);
      channel.on('type-2', 21);
      channel.on('type-2', 22);
      expect(channel.listenerCount('type-1')).toEqual(1);
      expect(channel.listenerCount('type-2')).toEqual(2);
    });
  });

  describe('method:listeners', function () {
    it('should return an array of listeners', function () {
      channel.on('type-1', 11);
      channel.on('type-2', 21);
      channel.on('type-2', 22);
      expect(channel.listeners('type-1')).toEqual([11]);
      expect(channel.listeners('type-2')).toEqual([21, 22]);
    });
  });

  describe('method:on', function () {
    it('should add event listeners', function () {
      channel.on('type-1', 11);
      channel.on('type-2', 21);
      channel.on('type-2', 22);
      var expected = {
        'type-1': [11],
        'type-2': [21, 22] };

      expect(channel._listeners).toEqual(expected);
    });

    it('should call event listeners on event', function () {
      var received = [];
      channel.on('type-1', function (n) {return received.push(n);});
      channel._handleEvent({ type: 'type-1', args: [11] });
      channel._handleEvent({ type: 'type-1', args: [12] });
      expect(received).toEqual([11, 12]);
    });
  });

  describe('method:once', function () {
    it('should add event listeners', function () {
      channel.once('type-1', 11);
      channel.once('type-2', 21);
      channel.once('type-2', 22);
      expect(channel._listeners['type-1'].length).toEqual(1);
      expect(channel._listeners['type-2'].length).toEqual(2);
    });

    it('should call event listeners only once', function () {
      var received = [];
      channel.once('type-1', function (n) {return received.push(n);});
      channel._handleEvent({ type: 'type-1', args: [11] });
      channel._handleEvent({ type: 'type-1', args: [12] });
      expect(received).toEqual([11]);
    });
  });

  describe('method:prependListener', function () {
    it('should add event listeners', function () {
      channel.prependListener('type-1', 11);
      channel.prependListener('type-2', 21);
      channel.prependListener('type-2', 22);
      var expected = {
        'type-1': [11],
        'type-2': [22, 21] };

      expect(channel._listeners).toEqual(expected);
    });
  });

  describe('method:prependOnceListener', function () {
    it('should add event listeners', function () {
      channel.prependOnceListener('type-1', 11);
      channel.prependOnceListener('type-2', 21);
      channel.prependOnceListener('type-2', 22);
      expect(channel._listeners['type-1'].length).toEqual(1);
      expect(channel._listeners['type-2'].length).toEqual(2);
    });

    it('should call event listeners only once', function () {
      var received = [];
      channel.prependOnceListener('type-1', function (n) {return received.push(n);});
      channel._handleEvent({ type: 'type-1', args: [11] });
      channel._handleEvent({ type: 'type-1', args: [12] });
      expect(received).toEqual([11]);
    });
  });

  describe('method:removeAllListeners', function () {
    it('should remove all listeners', function () {
      channel.on('type-1', 11);
      channel.on('type-2', 21);
      channel.on('type-2', 22);
      channel.removeAllListeners();
      expect(channel._listeners).toEqual({});
    });

    it('should remove all listeners for a type', function () {
      channel.on('type-1', 11);
      channel.on('type-2', 21);
      channel.on('type-2', 22);
      channel.removeAllListeners('type-2');
      expect(channel._listeners).toEqual({ 'type-1': [11] });
    });
  });

  describe('method:removeListener', function () {
    it('should remove all listeners', function () {
      channel.on('type-1', 11);
      channel.on('type-2', 21);
      channel.on('type-2', 22);
      var expected = {
        'type-1': [11],
        'type-2': [21] };

      channel.removeListener('type-2', 22);
      expect(channel._listeners).toEqual(expected);
    });
  });

  describe('_miscellaneous', function () {
    it('should ignore if event came from itself', function () {
      var received = [];
      channel.on('type-1', function (n) {return received.push(n);});
      channel._handleEvent({ type: 'type-1', args: [11] });
      channel._handleEvent({ type: 'type-1', args: [12], from: channel._sender });
      expect(received).toEqual([11]);
    });
  });
});