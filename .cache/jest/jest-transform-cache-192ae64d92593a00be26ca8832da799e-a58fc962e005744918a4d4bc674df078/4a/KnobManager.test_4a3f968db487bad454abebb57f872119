'use strict';var _extends2 = require('babel-runtime/helpers/extends');var _extends3 = _interopRequireDefault(_extends2);var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _enzyme = require('enzyme');
var _KnobManager = require('./KnobManager');var _KnobManager2 = _interopRequireDefault(_KnobManager);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('KnobManager', function () {
  describe('knob()', function () {
    describe('when the knob is present in the knobStore', function () {
      var testManager = new _KnobManager2.default();

      beforeEach(function () {
        testManager.knobStore = {
          set: jest.fn(),
          get: function get() {return {
              defaultValue: 'default value',
              value: 'current value',
              name: 'foo' };} };


      });

      it('should return the existing knob value when defaults match', function () {
        var defaultKnob = {
          name: 'foo',
          value: 'default value' };

        var knob = testManager.knob('foo', defaultKnob);
        expect(knob).toEqual('current value');
        expect(testManager.knobStore.set).not.toHaveBeenCalled();
      });

      it('should return the new default knob value when default has changed', function () {
        var defaultKnob = {
          name: 'foo',
          value: 'changed default value' };

        testManager.knob('foo', defaultKnob);

        var newKnob = (0, _extends3.default)({},
        defaultKnob, {
          defaultValue: defaultKnob.value });


        expect(testManager.knobStore.set).toHaveBeenCalledWith('foo', newKnob);
      });
    });

    describe('when the knob is not present in the knobStore', function () {
      var testManager = new _KnobManager2.default();

      beforeEach(function () {
        testManager.knobStore = {
          set: jest.fn(),
          get: jest.fn() };


        testManager.knobStore.get.
        mockImplementationOnce(function () {return undefined;}).
        mockImplementationOnce(function () {return 'normal value';});
      });

      it('should return the new default knob value when default has changed', function () {
        var defaultKnob = {
          name: 'foo',
          value: 'normal value' };

        testManager.knob('foo', defaultKnob);

        var newKnob = (0, _extends3.default)({},
        defaultKnob, {
          defaultValue: defaultKnob.value });


        expect(testManager.knobStore.set).toHaveBeenCalledWith('foo', newKnob);
      });
    });
  });

  describe('wrapStory()', function () {
    it('should contain the story and add correct props', function () {
      var testManager = new _KnobManager2.default();

      var testChannel = { emit: function emit() {} };
      var testStory = function testStory() {return _react2.default.createElement('div', { id: 'test-story' }, 'Test Content');};
      var testContext = {
        kind: 'Foo',
        story: 'bar baz' };

      var wrappedStory = testManager.wrapStory(testChannel, testStory, testContext);
      var wrapper = (0, _enzyme.shallow)(wrappedStory);
      expect(wrapper.find('#test-story').length).toBe(1);

      var storyWrapperProps = wrappedStory.props;
      expect(storyWrapperProps.channel).toEqual(testChannel);
      expect(storyWrapperProps.context).toEqual(testContext);
    });
  });
});