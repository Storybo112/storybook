'use strict';var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);var _createClass2 = require('babel-runtime/helpers/createClass');var _createClass3 = _interopRequireDefault(_createClass2);var _api = require('./api');var _api2 = _interopRequireDefault(_api);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var

MockClientStore = function () {function MockClientStore() {(0, _classCallCheck3.default)(this, MockClientStore);}(0, _createClass3.default)(MockClientStore, [{ key: 'update', value: function update(
    cb) {
      this.updateCallback = cb;
    } }]);return MockClientStore;}();


var stories = [
{ kind: 'abc', stories: ['a', 'b', 'c'] },
{ kind: 'bbc', stories: ['x', 'y', 'z'] }];


describe('manager.api.actions.api', function () {
  describe('setStories', function () {
    describe('no selected story', function () {
      it('should set stories and select the first story', function () {
        var clientStore = new MockClientStore();
        _api2.default.setStories({ clientStore: clientStore }, stories);

        var newState = clientStore.updateCallback({});
        expect(newState).toEqual({
          stories: stories,
          selectedKind: 'abc',
          selectedStory: 'a' });

      });
    });

    describe('has a selected story', function () {
      it('should set stories and select the existing story', function () {
        var clientStore = new MockClientStore();
        _api2.default.setStories({ clientStore: clientStore }, stories);

        var state = {
          selectedKind: 'abc',
          selectedStory: 'c' };

        var newState = clientStore.updateCallback(state);
        expect(newState).toEqual({
          stories: stories,
          selectedKind: 'abc',
          selectedStory: 'c' });

      });
    });

    describe('has a selected story, but it is story is not in new stories', function () {
      it('should set stories and select the first story of the selected kind', function () {
        var clientStore = new MockClientStore();
        _api2.default.setStories({ clientStore: clientStore }, stories);

        var state = {
          selectedKind: 'bbc',
          selectedStory: 'k' };

        var newState = clientStore.updateCallback(state);
        expect(newState).toEqual({
          stories: stories,
          selectedKind: 'bbc',
          selectedStory: 'x' });

      });
    });

    describe('has a selected story, but it is kind is not in new stories', function () {
      it('should set stories and select the first story', function () {
        var clientStore = new MockClientStore();
        _api2.default.setStories({ clientStore: clientStore }, stories);

        var state = {
          selectedKind: 'kky',
          selectedStory: 'c' };

        var newState = clientStore.updateCallback(state);
        expect(newState).toEqual({
          stories: stories,
          selectedKind: 'abc',
          selectedStory: 'a' });

      });
    });
  });

  describe('selectStory', function () {
    describe('with both kind and story', function () {
      it('should select the correct story', function () {
        var clientStore = new MockClientStore();
        _api2.default.selectStory({ clientStore: clientStore }, 'bbc', 'y');

        var state = {
          stories: stories,
          selectedKind: 'abc',
          selectedStory: 'c' };

        var stateUpdates = clientStore.updateCallback(state);
        expect(stateUpdates).toEqual({
          selectedKind: 'bbc',
          selectedStory: 'y' });

      });
    });

    describe('with just the kind', function () {
      it('should select the first of the kind', function () {
        var clientStore = new MockClientStore();
        _api2.default.selectStory({ clientStore: clientStore }, 'bbc');

        var state = {
          stories: stories,
          selectedKind: 'abc',
          selectedStory: 'c' };

        var stateUpdates = clientStore.updateCallback(state);
        expect(stateUpdates).toEqual({
          selectedKind: 'bbc',
          selectedStory: 'x' });

      });
    });
  });

  describe('jumpToStory', function () {
    describe('has enough stories', function () {
      it('should select the next story', function () {
        var clientStore = new MockClientStore();
        _api2.default.jumpToStory({ clientStore: clientStore }, 1);

        var state = {
          stories: stories,
          selectedKind: 'abc',
          selectedStory: 'c' };

        var stateUpdates = clientStore.updateCallback(state);
        expect(stateUpdates).toEqual({
          selectedKind: 'bbc',
          selectedStory: 'x' });

      });

      it('should select the prev story', function () {
        var clientStore = new MockClientStore();
        _api2.default.jumpToStory({ clientStore: clientStore }, -1);

        var state = {
          stories: stories,
          selectedKind: 'abc',
          selectedStory: 'c' };

        var stateUpdates = clientStore.updateCallback(state);
        expect(stateUpdates).toEqual({
          selectedKind: 'abc',
          selectedStory: 'b' });

      });
    });

    describe('has not enough stories', function () {
      it('should select the current story', function () {
        var clientStore = new MockClientStore();
        _api2.default.jumpToStory({ clientStore: clientStore }, 1);

        var state = {
          stories: stories,
          selectedKind: 'bbc',
          selectedStory: 'z' };

        var stateUpdates = clientStore.updateCallback(state);
        expect(stateUpdates).toEqual({
          selectedKind: 'bbc',
          selectedStory: 'z' });

      });
    });
  });

  describe('setOptions', function () {
    it('should update options', function () {
      var clientStore = new MockClientStore();
      _api2.default.setOptions({ clientStore: clientStore }, { abc: 10 });

      var state = {
        uiOptions: { bbc: 50, abc: 40 } };


      var stateUpdates = clientStore.updateCallback(state);
      expect(stateUpdates).toEqual({
        uiOptions: { bbc: 50, abc: 10 } });

    });

    it('should only update options for the key already defined', function () {
      var clientStore = new MockClientStore();
      _api2.default.setOptions({ clientStore: clientStore }, { abc: 10, notGoingToState: 20 });

      var state = {
        uiOptions: { bbc: 50, abc: 40 } };


      var stateUpdates = clientStore.updateCallback(state);
      expect(stateUpdates).toEqual({
        uiOptions: { bbc: 50, abc: 10 } });

    });
  });

  describe('setQueryParams', function () {
    it('shodul update query params', function () {
      var clientStore = new MockClientStore();
      _api2.default.setQueryParams({ clientStore: clientStore }, { abc: 'aaa', cnn: 'ccc' });

      var state = {
        customQueryParams: { bbc: 'bbb', abc: 'sshd' } };


      var stateUpdates = clientStore.updateCallback(state);
      expect(stateUpdates).toEqual({
        customQueryParams: { bbc: 'bbb', abc: 'aaa', cnn: 'ccc' } });

    });

    it('should delete the param if it is null', function () {
      var clientStore = new MockClientStore();
      _api2.default.setQueryParams({ clientStore: clientStore }, { abc: null, bbc: 'ccc' });

      var state = {
        customQueryParams: { bbc: 'bbb', abc: 'sshd' } };


      var stateUpdates = clientStore.updateCallback(state);
      expect(stateUpdates).toEqual({
        customQueryParams: { bbc: 'ccc' } });

    });
  });
});