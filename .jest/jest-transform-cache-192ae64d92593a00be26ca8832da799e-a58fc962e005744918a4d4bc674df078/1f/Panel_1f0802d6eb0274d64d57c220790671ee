'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _propTypes = require('prop-types');var _propTypes2 = _interopRequireDefault(_propTypes);
var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _PropForm = require('./PropForm');var _PropForm2 = _interopRequireDefault(_PropForm);
var _types = require('./types');var _types2 = _interopRequireDefault(_types);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

var styles = {
  panelWrapper: {
    width: '100%' },

  panel: {
    padding: '5px',
    width: 'auto',
    position: 'relative' },

  noKnobs: {
    fontFamily: '\n      -apple-system, ".SFNSText-Regular", "San Francisco", "Roboto",\n      "Segoe UI", "Helvetica Neue", "Lucida Grande", sans-serif\n    ',



    display: 'inline',
    width: '100%',
    textAlign: 'center',
    color: 'rgb(190, 190, 190)',
    padding: '10px' },

  resetButton: {
    position: 'absolute',
    bottom: 11,
    right: 10,
    border: 'none',
    borderTop: 'solid 1px rgba(0, 0, 0, 0.2)',
    borderLeft: 'solid 1px rgba(0, 0, 0, 0.2)',
    background: 'rgba(255, 255, 255, 0.5)',
    padding: '5px 10px',
    borderRadius: '4px 0 0 0',
    color: 'rgba(0, 0, 0, 0.5)',
    outline: 'none' } };var



Panel = function (_React$Component) {_inherits(Panel, _React$Component);
  function Panel(props) {_classCallCheck(this, Panel);var _this = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this,
    props));
    _this.handleChange = _this.handleChange.bind(_this);
    _this.setKnobs = _this.setKnobs.bind(_this);
    _this.reset = _this.reset.bind(_this);

    _this.state = { knobs: {} };
    _this.loadedFromUrl = false;
    _this.props.channel.on('addon:knobs:setKnobs', _this.setKnobs);return _this;
  }_createClass(Panel, [{ key: 'componentWillUnmount', value: function componentWillUnmount()

    {
      this.props.channel.removeListener('addon:knobs:setKnobs', this.setKnobs);
    } }, { key: 'setKnobs', value: function setKnobs(

    knobs) {var _this2 = this;
      var queryParams = {};var _props =
      this.props,api = _props.api,channel = _props.channel;

      Object.keys(knobs).forEach(function (name) {
        var knob = knobs[name];
        // For the first time, get values from the URL and set them.
        if (!_this2.loadedFromUrl) {
          var urlValue = api.getQueryParam('knob-' + name);

          if (urlValue !== undefined) {
            // If the knob value present in url
            knob.value = _types2.default[knob.type].deserialize(urlValue);
            channel.emit('addon:knobs:knobChange', knob);
          }
        }

        queryParams['knob-' + name] = _types2.default[knob.type].serialize(knob.value);
      });

      this.loadedFromUrl = true;
      api.setQueryParams(queryParams);
      this.setState({ knobs: knobs });
    } }, { key: 'reset', value: function reset()

    {
      this.props.channel.emit('addon:knobs:reset');
    } }, { key: 'handleChange', value: function handleChange(

    changedKnob) {var _props2 =
      this.props,api = _props2.api,channel = _props2.channel;var
      knobs = this.state.knobs;var
      name = changedKnob.name,type = changedKnob.type,value = changedKnob.value;
      var newKnobs = _extends({}, knobs);
      newKnobs[name] = _extends({},
      newKnobs[name],
      changedKnob);


      this.setState({ knobs: newKnobs });

      var queryParams = {};
      queryParams['knob-' + name] = _types2.default[type].serialize(value);

      api.setQueryParams(queryParams);
      channel.emit('addon:knobs:knobChange', changedKnob);
    } }, { key: 'render', value: function render()

    {var
      knobs = this.state.knobs;
      var knobsArray = Object.keys(knobs).filter(function (key) {return knobs[key].used;}).map(function (key) {return knobs[key];});

      if (knobsArray.length === 0) {
        return _react2.default.createElement('div', { style: styles.noKnobs }, 'NO KNOBS');
      }

      return (
        _react2.default.createElement('div', { style: styles.panelWrapper },
          _react2.default.createElement('div', { style: styles.panel },
            _react2.default.createElement(_PropForm2.default, { knobs: knobsArray, onFieldChange: this.handleChange })),

          _react2.default.createElement('button', { style: styles.resetButton, onClick: this.reset }, 'RESET')));


    } }]);return Panel;}(_react2.default.Component);exports.default = Panel;


Panel.propTypes = {
  channel: _propTypes2.default.object,
  onReset: _propTypes2.default.object,
  api: _propTypes2.default.object };