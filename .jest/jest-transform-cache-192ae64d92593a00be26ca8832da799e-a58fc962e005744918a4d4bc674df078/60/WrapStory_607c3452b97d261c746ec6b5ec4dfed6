'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _propTypes = require('prop-types');var _propTypes2 = _interopRequireDefault(_propTypes);
var _react = require('react');var _react2 = _interopRequireDefault(_react);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var

WrapStory = function (_React$Component) {_inherits(WrapStory, _React$Component);
  function WrapStory(props) {_classCallCheck(this, WrapStory);var _this = _possibleConstructorReturn(this, (WrapStory.__proto__ || Object.getPrototypeOf(WrapStory)).call(this,
    props));
    _this.knobChanged = _this.knobChanged.bind(_this);
    _this.resetKnobs = _this.resetKnobs.bind(_this);
    _this.setPaneKnobs = _this.setPaneKnobs.bind(_this);
    _this._knobsAreReset = false;
    _this.state = { storyContent: _this.props.initialContent };return _this;
  }_createClass(WrapStory, [{ key: 'componentDidMount', value: function componentDidMount()

    {
      // Watch for changes in knob editor.
      this.props.channel.on('addon:knobs:knobChange', this.knobChanged);
      // Watch for the reset event and reset knobs.
      this.props.channel.on('addon:knobs:reset', this.resetKnobs);
      // Watch for any change in the knobStore and set the panel again for those
      // changes.
      this.props.knobStore.subscribe(this.setPaneKnobs);
      // Set knobs in the panel for the first time.
      this.setPaneKnobs();
    } }, { key: 'componentWillReceiveProps', value: function componentWillReceiveProps(

    props) {
      this.setState({ storyContent: props.initialContent });
    } }, { key: 'componentWillUnmount', value: function componentWillUnmount()

    {
      this.props.channel.removeListener('addon:knobs:knobChange', this.knobChanged);
      this.props.channel.removeListener('addon:knobs:reset', this.resetKnobs);
      this.props.knobStore.unsubscribe(this.setPaneKnobs);
    } }, { key: 'setPaneKnobs', value: function setPaneKnobs()

    {var _props =
      this.props,channel = _props.channel,knobStore = _props.knobStore;
      channel.emit('addon:knobs:setKnobs', knobStore.getAll());
    } }, { key: 'knobChanged', value: function knobChanged(

    change) {var
      name = change.name,value = change.value;var _props2 =
      this.props,knobStore = _props2.knobStore,storyFn = _props2.storyFn,context = _props2.context;
      // Update the related knob and it's value.
      var knobOptions = knobStore.get(name);
      knobOptions.value = value;
      knobStore.markAllUnused();
      this.setState({ storyContent: storyFn(context) });
    } }, { key: 'resetKnobs', value: function resetKnobs()

    {var _props3 =
      this.props,knobStore = _props3.knobStore,storyFn = _props3.storyFn,context = _props3.context;
      knobStore.reset();
      this.setState({ storyContent: storyFn(context) });
      this.setPaneKnobs();
    } }, { key: 'render', value: function render()

    {
      return this.state.storyContent;
    } }]);return WrapStory;}(_react2.default.Component);exports.default = WrapStory;


WrapStory.propTypes = {
  context: _propTypes2.default.object,
  storyFn: _propTypes2.default.func,
  channel: _propTypes2.default.object,
  knobStore: _propTypes2.default.object,
  initialContent: _propTypes2.default.object };