'use strict';var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _enzyme = require('enzyme');
var _Panel = require('../Panel');var _Panel2 = _interopRequireDefault(_Panel);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('Panel', function () {
  it('should subscribe to setKnobs event of channel', function () {
    var testChannel = { on: jest.fn() };
    (0, _enzyme.shallow)(_react2.default.createElement(_Panel2.default, { channel: testChannel }));
    expect(testChannel.on).toHaveBeenCalledWith('addon:knobs:setKnobs', jasmine.any(Function));
  });

  describe('setKnobs handler', function () {
    it('should read url params and set values for existing knobs', function () {
      var handlers = {};

      var testChannel = {
        on: function on(e, handler) {
          handlers[e] = handler;
        },
        emit: jest.fn() };


      var testQueryParams = {
        'knob-foo': 'test string',
        bar: 'some other string' };


      var testApi = {
        getQueryParam: function getQueryParam(key) {return testQueryParams[key];},
        setQueryParams: jest.fn() };


      (0, _enzyme.shallow)(_react2.default.createElement(_Panel2.default, { channel: testChannel, api: testApi }));
      var setKnobsHandler = handlers['addon:knobs:setKnobs'];

      var knobs = {
        foo: {
          name: 'foo',
          value: 'default string',
          type: 'text' },

        baz: {
          name: 'baz',
          value: 'another knob value',
          type: 'text' } };



      setKnobsHandler(knobs);
      var knobFromUrl = {
        name: 'foo',
        value: testQueryParams['knob-foo'],
        type: 'text' };

      var e = 'addon:knobs:knobChange';
      expect(testChannel.emit).toHaveBeenCalledWith(e, knobFromUrl);
    });

    it('should set query params when url params are already read', function () {
      var handlers = {};

      var testChannel = {
        on: function on(e, handler) {
          handlers[e] = handler;
        },
        emit: jest.fn() };


      var testQueryParams = {
        'knob-foo': 'test string',
        bar: 'some other string' };


      var testApi = {
        getQueryParam: function getQueryParam(key) {return testQueryParams[key];},
        setQueryParams: jest.fn() };


      var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Panel2.default, { channel: testChannel, api: testApi }));
      var setKnobsHandler = handlers['addon:knobs:setKnobs'];

      var knobs = {
        foo: {
          name: 'foo',
          value: 'default string',
          type: 'text' },

        baz: {
          name: 'baz',
          value: 'another knob value',
          type: 'text' } };



      // Make it act like that url params are already checked
      wrapper.instance().loadedFromUrl = true;

      setKnobsHandler(knobs);
      var knobFromStory = {
        'knob-foo': knobs.foo.value,
        'knob-baz': knobs.baz.value };


      expect(testApi.setQueryParams).toHaveBeenCalledWith(knobFromStory);
    });
  });

  describe('handleChange()', function () {
    it('should set queryParams and emit knobChange event', function () {
      var testChannel = {
        on: jest.fn(),
        emit: jest.fn() };


      var testApi = {
        getQueryParam: jest.fn(),
        setQueryParams: jest.fn() };


      var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Panel2.default, { channel: testChannel, api: testApi }));

      var testChangedKnob = {
        name: 'foo',
        value: 'changed text',
        type: 'text' };

      wrapper.instance().handleChange(testChangedKnob);
      expect(testChannel.emit).toHaveBeenCalledWith('addon:knobs:knobChange', testChangedKnob);

      var paramsChange = { 'knob-foo': 'changed text' };
      expect(testApi.setQueryParams).toHaveBeenCalledWith(paramsChange);
    });
  });
});