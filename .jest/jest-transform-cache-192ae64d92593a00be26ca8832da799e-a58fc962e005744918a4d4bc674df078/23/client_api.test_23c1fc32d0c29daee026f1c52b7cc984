'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _client_api = require('./client_api');var _client_api2 = _interopRequireDefault(_client_api);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var

StoryStore = function () {
  function StoryStore() {_classCallCheck(this, StoryStore);
    this.stories = [];
  }_createClass(StoryStore, [{ key: 'addStory', value: function addStory(

    kind, story, fn) {
      this.stories.push({ kind: kind, story: story, fn: fn });
    } }, { key: 'getStoryKinds', value: function getStoryKinds()

    {
      return this.stories.reduce(function (kinds, info) {
        if (kinds.indexOf(info.kind) === -1) {
          kinds.push(info.kind);
        }
        return kinds;
      }, []);
    } }, { key: 'getStories', value: function getStories(

    kind) {
      return this.stories.reduce(function (stories, info) {
        if (info.kind === kind) {
          stories.push(info.story);
        }
        return stories;
      }, []);
    } }, { key: 'getStory', value: function getStory(

    kind, name) {
      return this.stories.reduce(function (fn, info) {
        if (!fn && info.kind === kind && info.story === name) {
          return info.fn;
        }
        return fn;
      }, null);
    } }, { key: 'hasStory', value: function hasStory(

    kind, name) {
      return Boolean(this.getStory(kind, name));
    } }]);return StoryStore;}();


describe('preview.client_api', function () {
  describe('setAddon', function () {
    it('should register addons', function () {
      var api = new _client_api2.default({});
      var data = void 0;

      api.setAddon({
        aa: function aa() {
          data = 'foo';
        } });


      api.storiesOf('none').aa();
      expect(data).toBe('foo');
    });

    it('should not remove previous addons', function () {
      var api = new _client_api2.default({});
      var data = [];

      api.setAddon({
        aa: function aa() {
          data.push('foo');
        } });


      api.setAddon({
        bb: function bb() {
          data.push('bar');
        } });


      api.storiesOf('none').aa().bb();
      expect(data).toEqual(['foo', 'bar']);
    });

    it('should call with the api context', function () {
      var api = new _client_api2.default({});
      var data = void 0;

      api.setAddon({
        aa: function aa() {
          data = _typeof(this.add);
        } });


      api.storiesOf('none').aa();
      expect(data).toBe('function');
    });

    it('should be able to access addons added previously', function () {
      var api = new _client_api2.default({});
      var data = void 0;

      api.setAddon({
        aa: function aa() {
          data = 'foo';
        } });


      api.setAddon({
        bb: function bb() {
          this.aa();
        } });


      api.storiesOf('none').bb();
      expect(data).toBe('foo');
    });

    it('should be able to access the current kind', function () {
      var api = new _client_api2.default({});
      var kind = 'dfdwf3e3';
      var data = void 0;

      api.setAddon({
        aa: function aa() {
          data = this.kind;
        } });


      api.storiesOf(kind).aa();
      expect(data).toBe(kind);
    });
  });

  describe('addDecorator', function () {
    it('should add local decorators', function () {
      var storyStore = new StoryStore();
      var api = new _client_api2.default({ storyStore: storyStore });
      var localApi = api.storiesOf('none');
      localApi.addDecorator(function (fn) {return 'aa-' + fn();});

      localApi.add('storyName', function () {return 'Hello';});
      expect(storyStore.stories[0].fn()).toBe('aa-Hello');
    });

    it('should add global decorators', function () {
      var storyStore = new StoryStore();
      var api = new _client_api2.default({ storyStore: storyStore });
      api.addDecorator(function (fn) {return 'bb-' + fn();});
      var localApi = api.storiesOf('none');

      localApi.add('storyName', function () {return 'Hello';});
      expect(storyStore.stories[0].fn()).toBe('bb-Hello');
    });

    it('should utilize both decorators at once', function () {
      var storyStore = new StoryStore();
      var api = new _client_api2.default({ storyStore: storyStore });
      var localApi = api.storiesOf('none');

      api.addDecorator(function (fn) {return 'aa-' + fn();});
      localApi.addDecorator(function (fn) {return 'bb-' + fn();});

      localApi.add('storyName', function () {return 'Hello';});
      expect(storyStore.stories[0].fn()).toBe('aa-bb-Hello');
    });

    it('should pass the context', function () {
      var storyStore = new StoryStore();
      var api = new _client_api2.default({ storyStore: storyStore });
      var localApi = api.storiesOf('none');
      localApi.addDecorator(function (fn) {return 'aa-' + fn();});

      localApi.add('storyName', function (_ref) {var kind = _ref.kind,story = _ref.story;return kind + '-' + story;});

      var kind = 'dfdfd';
      var story = 'ef349ff';

      var result = storyStore.stories[0].fn({ kind: kind, story: story });
      expect(result).toBe('aa-' + kind + '-' + story);
    });

    it('should have access to the context', function () {
      var storyStore = new StoryStore();
      var api = new _client_api2.default({ storyStore: storyStore });
      var localApi = api.storiesOf('none');
      localApi.addDecorator(function (fn, _ref2) {var kind = _ref2.kind,story = _ref2.story;return kind + '-' + story + '-' + fn();});

      localApi.add('storyName', function () {return 'Hello';});

      var kind = 'dfdfd';
      var story = 'ef349ff';

      var result = storyStore.stories[0].fn({ kind: kind, story: story });
      expect(result).toBe(kind + '-' + story + '-Hello');
    });
  });

  describe('clearDecorators', function () {
    it('should remove all global decorators', function () {
      var api = new _client_api2.default({});
      api._globalDecorators = 1234;
      api.clearDecorators();
      expect(api._globalDecorators).toEqual([]);
    });
  });

  describe('getStorybook', function () {
    it('should return storybook when empty', function () {
      var storyStore = new StoryStore();
      var api = new _client_api2.default({ storyStore: storyStore });
      var book = api.getStorybook();
      expect(book).toEqual([]);
    });

    it('should return storybook with stories', function () {
      var storyStore = new StoryStore();
      var api = new _client_api2.default({ storyStore: storyStore });
      var functions = {
        'story-1.1': function story11() {return 'story-1.1';},
        'story-1.2': function story12() {return 'story-1.2';},
        'story-2.1': function story21() {return 'story-2.1';},
        'story-2.2': function story22() {return 'story-2.2';} };

      var kind1 = api.storiesOf('kind-1');
      kind1.add('story-1.1', functions['story-1.1']);
      kind1.add('story-1.2', functions['story-1.2']);
      var kind2 = api.storiesOf('kind-2');
      kind2.add('story-2.1', functions['story-2.1']);
      kind2.add('story-2.2', functions['story-2.2']);
      var book = api.getStorybook();
      expect(book).toEqual([
      {
        kind: 'kind-1',
        stories: [
        { name: 'story-1.1', render: functions['story-1.1'] },
        { name: 'story-1.2', render: functions['story-1.2'] }] },


      {
        kind: 'kind-2',
        stories: [
        { name: 'story-2.1', render: functions['story-2.1'] },
        { name: 'story-2.2', render: functions['story-2.2'] }] }]);



    });
  });
});