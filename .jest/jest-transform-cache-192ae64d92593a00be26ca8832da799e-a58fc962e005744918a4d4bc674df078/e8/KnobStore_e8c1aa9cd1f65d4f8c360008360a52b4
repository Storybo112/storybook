"use strict";Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var KnobStore = function () {
  function KnobStore() {_classCallCheck(this, KnobStore);
    this.store = {};
    this.callbacks = [];
  }_createClass(KnobStore, [{ key: "has", value: function has(

    key) {
      return this.store[key] !== undefined;
    } }, { key: "set", value: function set(

    key, value) {
      this.store[key] = value;
      this.store[key].used = true;
      this.callbacks.forEach(function (cb) {return cb();});
    } }, { key: "get", value: function get(

    key) {
      var knob = this.store[key];
      if (knob) {
        knob.used = true;
      }
      return knob;
    } }, { key: "getAll", value: function getAll()

    {
      return this.store;
    } }, { key: "reset", value: function reset()

    {
      this.store = {};
    } }, { key: "markAllUnused", value: function markAllUnused()

    {var _this = this;
      Object.keys(this.store).forEach(function (knobName) {
        _this.store[knobName].used = false;
      });
    } }, { key: "subscribe", value: function subscribe(

    cb) {
      this.callbacks.push(cb);
    } }, { key: "unsubscribe", value: function unsubscribe(

    cb) {
      var index = this.callbacks.indexOf(cb);
      this.callbacks.splice(index, 1);
    } }]);return KnobStore;}();exports.default = KnobStore;