'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _shortcuts = require('./shortcuts');var _shortcuts2 = _interopRequireDefault(_shortcuts);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var

MockClientStore = function () {function MockClientStore() {_classCallCheck(this, MockClientStore);}_createClass(MockClientStore, [{ key: 'update', value: function update(
    cb) {
      this.updateCallback = cb;
    } }]);return MockClientStore;}();


describe('manager.shortcuts.actions.shortcuts', function () {
  describe('setOptions', function () {
    test('should update options', function () {
      var clientStore = new MockClientStore();
      _shortcuts2.default.setOptions({ clientStore: clientStore }, { abc: 10 });

      var state = {
        shortcutOptions: { bbc: 50, abc: 40 } };


      var stateUpdates = clientStore.updateCallback(state);
      expect(stateUpdates).toEqual({
        shortcutOptions: { bbc: 50, abc: 10 } });

    });

    test('should only update options for the key already defined', function () {
      var clientStore = new MockClientStore();
      _shortcuts2.default.setOptions({ clientStore: clientStore }, { abc: 10, kki: 50 });

      var state = {
        shortcutOptions: { bbc: 50, abc: 40 } };


      var stateUpdates = clientStore.updateCallback(state);
      expect(stateUpdates).toEqual({
        shortcutOptions: { bbc: 50, abc: 10 } });

    });
  });
});