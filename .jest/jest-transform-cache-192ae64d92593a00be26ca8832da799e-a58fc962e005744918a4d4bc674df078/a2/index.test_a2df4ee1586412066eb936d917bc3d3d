'use strict';var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _enzyme = require('enzyme');
var _index = require('../index');var _index2 = _interopRequireDefault(_index);
var _header = require('../header');var _header2 = _interopRequireDefault(_header);
var _text_filter = require('../text_filter');var _text_filter2 = _interopRequireDefault(_text_filter);
var _stories = require('../stories');var _stories2 = _interopRequireDefault(_stories);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

console.log(_index2.default);

describe('manager.ui.components.left_panel.index', function () {
  test('should render Header and TextFilter by default', function () {
    var openShortcutsHelp = jest.fn();
    var storyFilter = 'xxxxx';

    var wrap = (0, _enzyme.mount)(
    _react2.default.createElement(_index2.default, { openShortcutsHelp: openShortcutsHelp, storyFilter: storyFilter }));


    var header = wrap.find(_header2.default).first();
    expect(header).toHaveProp('openShortcutsHelp', openShortcutsHelp);

    var textFilter = wrap.find(_text_filter2.default).first();
    expect(textFilter).toHaveProp('text', storyFilter);

    expect(wrap.find(_stories2.default)).toBeEmpty();
  });

  test('should render stories only if stories prop exists', function () {
    var selectedKind = 'kk';
    var selectedStory = 'bb';
    var stories = [{ kind: 'kk', stories: ['bb'] }];

    var wrap = (0, _enzyme.mount)(
    _react2.default.createElement(_index2.default, { stories: stories, selectedKind: selectedKind, selectedStory: selectedStory }));


    var header = wrap.find(_stories2.default).first();
    expect(header.props()).toEqual({
      stories: stories,
      selectedKind: selectedKind,
      selectedStory: selectedStory });

  });

  describe('onStoryFilter prop', function () {
    test('should set filter as an empty text on TextFilter.onClear', function () {
      var onStoryFilter = jest.fn();
      var wrap = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { onStoryFilter: onStoryFilter }));

      var textFilter = wrap.find(_text_filter2.default).first();
      textFilter.props().onClear();

      expect(onStoryFilter).toHaveBeenCalledWith('');
    });

    test('should set filter as the given text of TextFilter.onChange', function () {
      var onStoryFilter = jest.fn();
      var filterText = 'XXX';
      var wrap = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { onStoryFilter: onStoryFilter }));

      var textFilter = wrap.find(_text_filter2.default).first();
      textFilter.props().onChange(filterText);

      expect(onStoryFilter).toHaveBeenCalledWith(filterText);
    });
  });
});