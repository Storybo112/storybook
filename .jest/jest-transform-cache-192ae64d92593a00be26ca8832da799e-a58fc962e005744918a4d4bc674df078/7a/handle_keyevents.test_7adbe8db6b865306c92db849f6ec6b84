'use strict';var _handle_keyevents = require('./handle_keyevents');var _handle_keyevents2 = _interopRequireDefault(_handle_keyevents);
var _keycode = require('keycode');var _keycode2 = _interopRequireDefault(_keycode);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('manager.ui.config.handle_keyevents', function () {
  test('should call the correct action', function () {
    var actions = {
      shortcuts: {
        handleEvent: jest.fn() } };


    var originalOnkeydown = window.onkeydown;
    (0, _handle_keyevents2.default)(actions);

    var e = {
      ctrlKey: true,
      shiftKey: true,
      keyCode: (0, _keycode2.default)('F'),
      preventDefault: function preventDefault() {},
      target: {
        tagName: 'DIV',
        getAttribute: function getAttribute() {
          return null;
        } } };


    window.onkeydown(e);

    expect(actions.shortcuts.handleEvent).toHaveBeenCalled();

    window.onkeydown = originalOnkeydown;
  });

  test('should not call any actions if the event target is an input', function () {
    var actions = {
      shortcuts: {
        handleEvent: jest.fn() } };


    var originalOnkeydown = window.onkeydown;
    (0, _handle_keyevents2.default)(actions);

    var e = {
      ctrlKey: true,
      shiftKey: true,
      keyCode: (0, _keycode2.default)('F'),
      preventDefault: function preventDefault() {},
      target: {
        tagName: 'INPUT',
        getAttribute: function getAttribute() {
          return null;
        } } };


    window.onkeydown(e);

    expect(actions.shortcuts.handleEvent).not.toHaveBeenCalled();

    window.onkeydown = originalOnkeydown;
  });

  test('should not call any actions if the event target has contenteditable enabled', function () {
    var actions = {
      shortcuts: {
        handleEvent: jest.fn() } };



    var originalOnkeydown = window.onkeydown;
    (0, _handle_keyevents2.default)(actions);

    var e = {
      ctrlKey: true,
      shiftKey: true,
      keyCode: (0, _keycode2.default)('F'),
      preventDefault: function preventDefault() {},
      target: {
        tagName: 'DIV',
        getAttribute: function getAttribute(attr) {
          return (/contenteditable/i.test(attr) ? '' : null);
        } } };



    window.onkeydown(e);

    expect(actions.shortcuts.handleEvent).not.toHaveBeenCalled();

    window.onkeydown = originalOnkeydown;
  });
});