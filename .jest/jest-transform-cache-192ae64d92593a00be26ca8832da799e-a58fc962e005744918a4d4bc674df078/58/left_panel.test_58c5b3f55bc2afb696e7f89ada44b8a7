'use strict';

var _left_panel = require('./left_panel');

describe('manager.ui.containers.left_panel', function () {
  describe('mapper', function () {
    test('should give correct data', function () {
      var stories = [{ kind: 'sk', stories: ['dd'] }];
      var selectedKind = 'sk';
      var selectedStory = 'dd';
      var uiOptions = {
        name: 'foo',
        url: 'bar' };

      var selectStory = function selectStory() {
        return 'selectStory';
      };
      var toggleShortcutsHelp = function toggleShortcutsHelp() {
        return 'toggleShortcutsHelp';
      };
      var setStoryFilter = function setStoryFilter() {
        return 'setStoryFilter';
      };
      var props = {};
      var env = {
        actions: function actions() {
          return {
            api: {
              selectStory: selectStory },

            ui: {
              toggleShortcutsHelp: toggleShortcutsHelp,
              setStoryFilter: setStoryFilter } };


        } };

      var state = {
        storyFilter: null,
        stories: stories,
        selectedKind: selectedKind,
        selectedStory: selectedStory,
        uiOptions: uiOptions };

      var result = (0, _left_panel.mapper)(state, props, env);

      expect(result.stories).toEqual(stories);
      expect(result.selectedKind).toBe(selectedKind);
      expect(result.selectedStory).toBe(selectedStory);
      expect(result.storyFilter).toBe(null);
      expect(result.onSelectStory).toBe(selectStory);
      expect(result.onStoryFilter).toBe(setStoryFilter);
      expect(result.openShortcutsHelp).toBe(toggleShortcutsHelp);
    });

    test('should filter stories according to the given filter', function () {
      var stories = [{ kind: 'pk', stories: ['dd'] }, { kind: 'ss', stories: ['dd'] }, { kind: 'pkr', stories: ['dd'] }];
      var selectedKind = 'pk';
      var selectedStory = 'dd';
      var uiOptions = {
        name: 'foo',
        url: 'bar' };

      var selectStory = function selectStory() {
        return 'selectStory';
      };
      var toggleShortcutsHelp = function toggleShortcutsHelp() {
        return 'toggleShortcutsHelp';
      };
      var setStoryFilter = function setStoryFilter() {
        return 'setStoryFilter';
      };
      var props = {};
      var env = {
        actions: function actions() {
          return {
            api: {
              selectStory: selectStory },

            ui: {
              toggleShortcutsHelp: toggleShortcutsHelp,
              setStoryFilter: setStoryFilter } };


        } };

      var state = {
        storyFilter: 'ss',
        stories: stories,
        selectedKind: selectedKind,
        selectedStory: selectedStory,
        uiOptions: uiOptions };

      var result = (0, _left_panel.mapper)(state, props, env);

      expect(result.stories).toEqual([stories[0], // selected kind is always there. That's why this is here.
      stories[1]]);
    });

    test('should filter and sort stories according to the given filter', function () {
      var stories = [{ kind: 'ss', stories: ['dd'] }, { kind: 'pk', stories: ['dd'] }, { kind: 'pkr', stories: ['dd'] }];
      var selectedKind = 'pk';
      var selectedStory = 'dd';
      var uiOptions = {
        name: 'foo',
        url: 'bar',
        sortStoriesByKind: true };

      var selectStory = function selectStory() {
        return 'selectStory';
      };
      var toggleShortcutsHelp = function toggleShortcutsHelp() {
        return 'toggleShortcutsHelp';
      };
      var setStoryFilter = function setStoryFilter() {
        return 'setStoryFilter';
      };
      var props = {};
      var env = {
        actions: function actions() {
          return {
            api: {
              selectStory: selectStory },

            ui: {
              toggleShortcutsHelp: toggleShortcutsHelp,
              setStoryFilter: setStoryFilter } };


        } };

      var state = {
        storyFilter: 'ss',
        stories: stories,
        selectedKind: selectedKind,
        selectedStory: selectedStory,
        uiOptions: uiOptions };

      var result = (0, _left_panel.mapper)(state, props, env);

      expect(result.stories).toEqual([stories[1], // selected kind is always there. That's why this is here.
      stories[0]]);
    });
  });
});